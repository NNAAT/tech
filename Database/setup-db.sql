-- Update SR_ID
SELECT UpdateGeometrySRID('beach_protection','geom',3044);
SELECT UpdateGeometrySRID('buildings','geom',3044);
SELECT UpdateGeometrySRID('burial_areas','geom',3044);
SELECT UpdateGeometrySRID('coast_line_zone','geom',3044);
SELECT UpdateGeometrySRID('coast_line_zone','geom',3044);
SELECT UpdateGeometrySRID('conservation','geom',3044);
SELECT UpdateGeometrySRID('district_plan','geom',3044);
SELECT UpdateGeometrySRID('drinking_water_interests','geom',3044);
SELECT UpdateGeometrySRID('dune_conservation','geom',3044);
SELECT UpdateGeometrySRID('edge_water_stream','geom',3044);
SELECT UpdateGeometrySRID('forest','geom',3044);
SELECT UpdateGeometrySRID('forest_protection_line','geom',3044);
SELECT UpdateGeometrySRID('forest_reserve','geom',3044);
SELECT UpdateGeometrySRID('hexgrid_150','geom',3044);
SELECT UpdateGeometrySRID('lake_protection_line','geom',3044);
SELECT UpdateGeometrySRID('lakes','geom',3044);
SELECT UpdateGeometrySRID('lowlands','geom',3044);
SELECT UpdateGeometrySRID('municipal_plan','geom',3044);
SELECT UpdateGeometrySRID('municipality_cut_layer','geom',3044);
SELECT UpdateGeometrySRID('natura2000_bird_protection','geom',3044);
SELECT UpdateGeometrySRID('natura2000_habitat','geom',3044);
SELECT UpdateGeometrySRID('nature_and_wildlife_sanctuary','geom',3044);
SELECT UpdateGeometrySRID('nature_registration','geom',3044);
SELECT UpdateGeometrySRID('protected_ancient_sites','geom',3044);
SELECT UpdateGeometrySRID('protected_nature_types','geom',3044);
SELECT UpdateGeometrySRID('protected_stone_and_earth_dikes','geom',3044);
SELECT UpdateGeometrySRID('protected_water_streams','geom',3044);
SELECT UpdateGeometrySRID('railroad','geom',3044);
SELECT UpdateGeometrySRID('ramsar_area','geom',3044);
SELECT UpdateGeometrySRID('raw_material_sites','geom',3044);
SELECT UpdateGeometrySRID('roadsides','geom',3044);
SELECT UpdateGeometrySRID('sfl_areas','geom',3044);
SELECT UpdateGeometrySRID('stream_protection_line','geom',3044);
SELECT UpdateGeometrySRID('technical_areas','geom',3044);
SELECT UpdateGeometrySRID('v1_soil_polution','geom',3044);
SELECT UpdateGeometrySRID('v2_soil_polution','geom',3044);
SELECT UpdateGeometrySRID('wetlands','geom',3044);
SELECT UpdateGeometrySRID('wind_resource_layer','geom',3044);
SELECT UpdateGeometrySRID('wind_turbines','geom',3044);
SELECT UpdateGeometrySRID('zones_in_denmark','geom',3044);

--------------------------------------------------------------------
--|                       CREATING BUFFERS                       |--
--------------------------------------------------------------------

-- WIND TURBINE BUFFERING
-------------------------------------------------------------------

-- Buffer the wind turbines with 4 times the blade length
CREATE MATERIALIZED VIEW MV_WIND_TURBINE_BUFFER
AS
(
    SELECT  ROW_NUMBER() OVER ()::INT WTB_ID,
            IQ.GEOM
    FROM    (SELECT (ST_DUMP(ST_UNION(ST_BUFFER(GEOM, CFG.BLADE_LENGTH * 4)))).GEOM
            FROM WIND_TURBINES, V_CONFIG CFG
            WHERE CFG.C_ID = 1
        ) AS IQ
    -- IQ = Inner Query
)
WITH DATA;


-- Index MV_WIND_TURBINE_BUFFER
CREATE INDEX MV_GIX_WIND_TUBRINE_BUFFER
ON MV_WIND_TURBINE_BUFFER
USING GIST (GEOM);


-- Distinguish buffers with more than 3 wind turbines in them
-- define that as a wind site
CREATE VIEW V_WIND_TURBINE_SITES
AS
(
    SELECT MV_WTB.WTB_ID, MV_WTB.GEOM, COUNT(WT.GID) WT_CNT
    FROM  MV_WIND_TURBINE_BUFFER MV_WTB
        CROSS JOIN WIND_TURBINES WT
    WHERE ST_INTERSECTS(WT.GEOM, MV_WTB.GEOM)
    GROUP BY WTB_ID, MV_WTB.GEOM
        HAVING COUNT(WT.GID) > 3
    ORDER BY WT_CNT DESC
);


-- TODO: change intersection to a INSIDE b
-- Buffer the wind turbine sites with buffer size 28 times the heigth of turbine
CREATE MATERIALIZED VIEW MV_WIND_TURBINE_SITE_BUFFER
AS
(
    SELECT  ROW_NUMBER() OVER ()::INT WTSB_ID,
        IQ.GEOM
    FROM    (SELECT (ST_DUMP(ST_UNION(ST_BUFFER(WT.GEOM, CFG.WT_HEIGHT)))).GEOM
            FROM     WIND_TURBINES WT
                JOIN V_WIND_TURBINE_SITES V_WTS
                    ON ST_INTERSECTS(WT.GEOM, V_WTS.GEOM)
                JOIN V_CONFIG CFG
                    ON CFG.C_ID = 1
        ) AS IQ
    -- IQ = Inner Query
)
WITH DATA;


-- Index MV_WIND_TURBINE_SITE_BUFFER
CREATE INDEX MV_GIX_WIND_TUBRINE_SITE_BUFFER
ON MV_WIND_TURBINE_SITE_BUFFER
USING GIST (GEOM);


-- STATE ROAD BUFFERING
-------------------------------------------------------------------
CREATE MATERIALIZED VIEW MV_STATE_ROAD_BUFFER
AS
(
    SELECT  ROW_NUMBER() OVER ()::INT SRB_ID,
        ST_Buffer(STATE_ROADS.GEOM, 250) GEOM
    FROM STATE_ROADS
)
WITH DATA;


-- Index MV_STATE_ROAD_BUFFER
CREATE INDEX MV_GIX_STATE_ROAD_BUFFER
ON MV_STATE_ROAD_BUFFER
USING GIST (GEOM);


-- MUNICIPALITY ROAD BUFFERING
-------------------------------------------------------------------
CREATE MATERIALIZED VIEW MV_MUNICIPALITY_ROAD_BUFFER
AS
(
    SELECT  ROW_NUMBER() OVER ()::INT AS MRB_ID,
        ST_BUFFER(GEOM, 250) GEOM
    FROM MUNICIPALITY_ROADS
    WHERE VEJSTATUS = 'Offentlig'
)
WITH DATA;

CREATE INDEX MV_GIX_MUNICIPALITY_ROAD_BUFFER
ON MV_MUNICIPALITY_ROAD_BUFFER
USING GIST (GEOM);


-- RAILROAD BUFFERING
-------------------------------------------------------------------
CREATE MATERIALIZED VIEW MV_RAILROAD_BUFFER
AS
(
    SELECT  ROW_NUMBER() OVER ()::INT AS RFB_ID,
        ST_BUFFER(RAILROAD.GEOM, 250) GEOM

    FROM RAILROAD
)
WITH DATA;

CREATE INDEX MV_GIX_RAILROAD_BUFFER
ON MV_RAILROAD_BUFFER
USING GIST (GEOM);


-- RESIDENTIAL AREA BUFFERING
-------------------------------------------------------------------
CREATE MATERIALIZED VIEW MV_BUILDINGS_BUFFER
AS
(
    SELECT ROW_NUMBER() OVER ()::INT AS BB_ID,
        ST_UNION(ST_BUFFER(B.GEOM, CFG.WT_HEIGHT * 4)) AS GEOM
    FROM BUILDINGS B
        JOIN MUNICIPALITY_CUT_LAYER MCL
            ON ST_INTERSECTS(B.GEOM, MCL.GEOM)
        JOIN V_CONFIG CFG
            ON CFG.C_ID = 1
        INNER JOIN BUILDING_META BM
            ON ST_INTERSECTS(B.GEOM, BM.GEOM)
                AND BM.BYG_ANVEND IN (110, 120, 130, 140, 150, 160, 190, 510, 520, 530, 540, 550)
    -- CODES FOR BUILDING USE
    -- SOURCE: HTTP://BBR.DK/BYG-ANVENDELSE/0/30 
)
WITH DATA;


-- CREATE FINAL MERGED RESTRICTIVE BUFFER
-- TODO cut all layers to municipality boundaries
/*
CREATE MATERIALIZED VIEW MV_MERGED_RESTRICTIVE_BUFFER
AS
(
    SELECT ROW_NUMBER() OVER ()::INT AS RB_ID,
    ST_BUFFER(ST_COLLECT(
        ARRAY(
            SELECT ST_FORCE2D(GEOM) FROM MV_WIND_TURBINE_BUFFER
            UNION SELECT ST_FORCE2D(GEOM) FROM PROTECTED_ANCIENT_SITES
            UNION SELECT ST_FORCE2D(GEOM) FROM MV_BUILDINGS_BUFFER
            UNION SELECT ST_FORCE2D(GEOM) FROM MV_STATE_ROAD_BUFFER
            UNION SELECT ST_FORCE2D(GEOM) FROM MV_RAILROAD_BUFFER
            UNION SELECT ST_FORCE2D(GEOM) FROM BURIAL_AREAS
            UNION SELECT ST_FORCE2D(GEOM) FROM DUNE_CONSERVATION
            UNION SELECT ST_FORCE2D(GEOM) FROM NATURA2000_BIRD_PROTECTION
            UNION SELECT ST_FORCE2D(GEOM) FROM NATURA2000_HABITAT
            UNION SELECT ST_FORCE2D(GEOM) FROM NATURE_AND_WILDLIFE_SANCTUARY
            UNION SELECT ST_FORCE2D(GEOM) FROM NATURE_REGISTRATION
            UNION SELECT ST_FORCE2D(GEOM) FROM PROTECTED_NATURE_TYPES
            UNION SELECT ST_FORCE2D(GEOM) FROM RAMSAR_AREA
            UNION SELECT ST_FORCE2D(GEOM) FROM FOREST_RESERVE
            
            UNION SELECT ST_FORCE2D(CSV.GEOM)
                FROM CONSERVATION CSV
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, CSV.GEOM)
            
            UNION SELECT ST_FORCE2D(PWS.GEOM)
                FROM PROTECTED_WATER_STREAMS PWS
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, PWS.GEOM)
            
            UNION SELECT ST_FORCE2D(EWS.GEOM)
                FROM EDGE_WATER_STREAM EWS
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, EWS.GEOM)
            
            UNION SELECT ST_FORCE2D(FOREST.GEOM)
                FROM FOREST
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, FOREST.GEOM)
            
            UNION SELECT ST_FORCE2D(LAKES.GEOM)
                FROM LAKES
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, LAKES.GEOM)
            
            UNION SELECT ST_FORCE2D(RS.GEOM)
                FROM ROADSIDES RS
                    INNER JOIN MUNICIPALITY_CUT_LAYER MCL
                        ON ST_INTERSECTS(MCL.GEOM, RS.GEOM)
        )
    ), 0)
)
WITH DATA;
*/
--------------------------------------------------------------------
--|               CALCULATING GRID RATIO VALUES                  |--
--------------------------------------------------------------------

--                      DERIVED BUFFER ZONES                      --
--------------------------------------------------------------------

-- Finding wind turbine ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN WIND_TURBINE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET WIND_TURBINE_RATIO = IQ.PRCNT
    FROM (SELECT HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVWTB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            MV_WIND_TURBINE_BUFFER MVWTB
        WHERE ST_INTERSECTS(HG.GEOM, MVWTB.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding wind turbine site ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN WIND_TURBINE_SITE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET WIND_TURBINE_SITE_RATIO = IQ.PRCNT
    FROM (SELECT HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVWTSB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            MV_WIND_TURBINE_SITE_BUFFER MVWTSB
        WHERE ST_INTERSECTS(HG.GEOM, MVWTSB.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding state road ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN STATE_ROAD_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET STATE_ROAD_RATIO = IQ.PRCNT
    FROM (SELECT HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVSRB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            MV_STATE_ROAD_BUFFER MVSRB
        WHERE ST_INTERSECTS(HG.GEOM, MVSRB.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding municipality road ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN MUNICIPALITY_ROAD_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET MUNICIPALITY_ROAD_RATIO = IQ.PRCNT
    FROM (SELECT HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVMRB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            MV_MUNICIPALITY_ROAD_BUFFER MVMRB
        WHERE ST_INTERSECTS(HG.GEOM, MVMRB.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding railroad ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN RAILROAD_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET RAILROAD_RATIO = IQ.PRCNT
    FROM (SELECT HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVRB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            MV_RAILROAD_BUFFER MVRB
        WHERE ST_INTERSECTS(HG.GEOM, MVRB.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;

--                          OTHER LAYERS                          --
--------------------------------------------------------------------

-- Finding beach protection ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN BEACH_PROTECTION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET BEACH_PROTECTION_RATIO = IQ.PRCNT
    FROM    (SELECT    HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(BP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM     HEXGRID_150 HG,
            BEACH_PROTECTION BP
        WHERE ST_INTERSECTS(HG.GEOM, BP.GEOM)
            GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding building buffer ratio values
ALTER TABLE HEXGRID_150
ADD COLUMN BUILDING_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET BUILDING_RATIO = IQ.PRCNT
    FROM (    SELECT HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MVBB.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM MV_BUILDINGS_BUFFER MVBB
            JOIN HEXGRID_150 HG
                ON ST_INTERSECTS(HG.GEOM, MVBB.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- FINDING BURIAL AREA RATIO VALUES
ALTER TABLE HEXGRID_150
ADD COLUMN BURIAL_AREA_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET BURIAL_AREA_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(BA.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN BURIAL_AREAS BA
                ON ST_INTERSECTS(HG.GEOM, BA.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding church protection line ratio
ALTER TABLE HEXGRID_150
ADD COLUMN CHURCH_PROTECTION_LINE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET CHURCH_PROTECTION_LINE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(CPL.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN CHURCH_PROTECTION_LINE CPL
                ON ST_INTERSECTS(HG.GEOM, CPL.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- FINDING COAST LINE RATIO VALUES
ALTER TABLE HEXGRID_150
ADD COLUMN COAST_LINE_ZONE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET COAST_LINE_ZONE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(CLZ.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN COAST_LINE_ZONE CLZ
                ON ST_INTERSECTS(HG.GEOM, CLZ.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding conservation ratio
ALTER TABLE HEXGRID_150
ADD COLUMN CONSERVATION_RATIO
NUMERIC NOT NULL DEFAULT 1;

-- FINDING CONSERVATION RATIO VALUES
UPDATE HEXGRID_150
    SET CONSERVATION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(C.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN CONSERVATION C
                ON ST_INTERSECTS(HG.GEOM, C.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding drinking water interest ratio
ALTER TABLE HEXGRID_150
ADD COLUMN DRINKING_WATER_INTEREST_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET DRINKING_WATER_INTEREST_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(DWI.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN DRINKING_WATER_INTERESTS DWI
                ON ST_INTERSECTS(HG.GEOM, DWI.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding dune conservation ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN DUNE_CONSERVATION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET DUNE_CONSERVATION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(DC.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN DUNE_CONSERVATION DC
                ON ST_INTERSECTS(HG.GEOM, DC.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding edge water stream ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN EDGE_WATER_STREAM_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET EDGE_WATER_STREAM_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(EWS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN EDGE_WATER_STREAM EWS
                ON ST_INTERSECTS(HG.GEOM, EWS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding forest ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN FOREST_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET FOREST_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(FOREST.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN FOREST
                ON ST_INTERSECTS(HG.GEOM, FOREST.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding forest reserve ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN FOREST_RESERVE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET FOREST_RESERVE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(FR.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN FOREST_RESERVE FR
                ON ST_INTERSECTS(HG.GEOM, FR.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding lake protection line ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN LAKE_PROTECTION_LINE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET LAKE_PROTECTION_LINE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(LPL.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN LAKE_PROTECTION_LINE LPL
                ON ST_INTERSECTS(HG.GEOM, LPL.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding lake ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN LAKES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET LAKES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(LAKES.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN LAKES
                ON ST_INTERSECTS(HG.GEOM, LAKES.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding lowlands protection line ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN LOWLANDS_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET LOWLANDS_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(LOWLANDS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN LOWLANDS
                ON ST_INTERSECTS(HG.GEOM, LOWLANDS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


--TODO 0 lines???
-- Finding natural bird protection ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN NATURAL_BIRD_PROTECTION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET NATURAL_BIRD_PROTECTION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(NBP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN NATURA2000_BIRD_PROTECTION NBP
                ON ST_INTERSECTS(HG.GEOM, NBP.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding natural habitat ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN NATURAL_HABITAT_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET NATURAL_HABITAT_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(NH.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN NATURA2000_HABITAT NH
                ON ST_INTERSECTS(HG.GEOM, NH.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding nature and wildlife sanctuary value
ALTER TABLE HEXGRID_150
ADD COLUMN NATURE_AND_WILDLIFE_SANCTUARY_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET NATURE_AND_WILDLIFE_SANCTUARY_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(NWS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN NATURE_AND_WILDLIFE_SANCTUARY NWS
                ON ST_INTERSECTS(HG.GEOM, NWS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


--TODO 0 lines??
-- Finding nature registration value
ALTER TABLE HEXGRID_150
ADD COLUMN NATURE_REGISTRATION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET NATURE_REGISTRATION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(NR.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN NATURE_REGISTRATION NR
                ON ST_INTERSECTS(HG.GEOM, NR.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding protected ancient sites value
ALTER TABLE HEXGRID_150
ADD COLUMN PROTECTED_ANCIENT_SITES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET PROTECTED_ANCIENT_SITES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(PAS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN PROTECTED_ANCIENT_SITES PAS
                ON ST_INTERSECTS(HG.GEOM, PAS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding protected nature types value
ALTER TABLE HEXGRID_150
ADD COLUMN PROTECTED_NATURE_TYPES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET PROTECTED_NATURE_TYPES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(PNT.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN PROTECTED_NATURE_TYPES PNT
                ON ST_INTERSECTS(HG.GEOM, PNT.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding protected earth and stone dikes values
ALTER TABLE HEXGRID_150
ADD COLUMN PROTECTED_EARTH_STONE_DIKES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET PROTECTED_EARTH_STONE_DIKES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(PSED.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN PROTECTED_STONE_AND_EARTH_DIKES PSED
                ON ST_INTERSECTS(HG.GEOM, PSED.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding protected water streams values
ALTER TABLE HEXGRID_150
ADD COLUMN PROTECTED_WATER_STREAMS_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET PROTECTED_WATER_STREAMS_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(PWS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN PROTECTED_WATER_STREAMS PWS
                ON ST_INTERSECTS(HG.GEOM, PWS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


--TODO 0 lines
-- Finding ramsar area values
ALTER TABLE HEXGRID_150
ADD COLUMN RAMSAR_AREA_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET RAMSAR_AREA_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(RA.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN RAMSAR_AREA RA
                ON ST_INTERSECTS(HG.GEOM, RA.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding raw material sites values
ALTER TABLE HEXGRID_150
ADD COLUMN RAW_MATERIAL_SITES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET RAW_MATERIAL_SITES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(RMS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN RAW_MATERIAL_SITES RMS
                ON ST_INTERSECTS(HG.GEOM, RMS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding roadsides values
ALTER TABLE HEXGRID_150
ADD COLUMN ROADSIDES_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET ROADSIDES_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(ROADSIDES.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN ROADSIDES
                ON ST_INTERSECTS(HG.GEOM, ROADSIDES.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding SFL areas values
ALTER TABLE HEXGRID_150
ADD COLUMN SFL_AREAS_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET SFL_AREAS_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(SFLA.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN SFL_AREAS SFLA
                ON ST_INTERSECTS(HG.GEOM, SFLA.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding stream protection line values
ALTER TABLE HEXGRID_150
ADD COLUMN STREAM_PROTECTION_LINE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET STREAM_PROTECTION_LINE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(SPL.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN STREAM_PROTECTION_LINE SPL
                ON ST_INTERSECTS(HG.GEOM, SPL.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding technical areas values
ALTER TABLE HEXGRID_150
ADD COLUMN TECHNICAL_AREAS_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET TECHNICAL_AREAS_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(TA.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN TECHNICAL_AREAS TA
                ON ST_INTERSECTS(HG.GEOM, TA.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding v1 soil pollution values
ALTER TABLE HEXGRID_150
ADD COLUMN V1_SOIL_POLUTION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET V1_SOIL_POLUTION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(SP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN V1_SOIL_POLUTION SP
                ON ST_INTERSECTS(HG.GEOM, SP.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding v2 soil pollution values
ALTER TABLE HEXGRID_150
ADD COLUMN V2_SOIL_POLUTION_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET V2_SOIL_POLUTION_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(SP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN V2_SOIL_POLUTION SP
                ON ST_INTERSECTS(HG.GEOM, SP.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


-- Finding wetlands values
ALTER TABLE HEXGRID_150
ADD COLUMN WETLANDS_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET WETLANDS_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(WETLANDS.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN WETLANDS
                ON ST_INTERSECTS(HG.GEOM, WETLANDS.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;


/*
TODO
ERROR:  Error performing intersection: TopologyException: Input geom 0 is invalid: Ring Self-intersection at or near point 596982.45007491671 6234111.3250191659 0 at 596982.45007491671 6234111.3250191659 0
********** Error **********
-- Finding forest protection line ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN FOREST_PROTECTION_LINE_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET FOREST_PROTECTION_LINE_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(FPL.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN FOREST_PROTECTION_LINE FPL
                ON ST_INTERSECTS(HG.GEOM, FPL.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;
*/

-- FINDING DISTRICT PLAN RATIO VALUES
/*
TODO
ALTER TABLE HEXGRID_150
ADD COLUMN DISTRICT_PLAN_RATIO
NUMERIC NOT NULL DEFAULT 1;

--ERROR: GEOSIntersects: TopologyException: side location conflict at 604264.28670000006 6229660.4340000004
UPDATE HEXGRID_150
    SET DISTRICT_PLAN_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
        1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(DP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN DISTRICT_PLAN DP
                ON ST_INTERSECTS(HG.GEOM, DP.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;
*/


/*
TODO
ERROR:  GEOSIntersects: TopologyException: side location conflict at 590713.79470000044 6240225.7601999994
********** Error **********

-- Finding municipal plan ratio value
ALTER TABLE HEXGRID_150
ADD COLUMN MUNICIPAL_PLAN_RATIO
NUMERIC NOT NULL DEFAULT 1;

UPDATE HEXGRID_150
    SET MUNICIPAL_PLAN_RATIO = IQ.PRCNT
    FROM (    SELECT     HG.GID ID,
            1 - ROUND(CAST(FLOAT8(ST_AREA(ST_UNION(ST_INTERSECTION(MP.GEOM, HG.GEOM))) / HG.SHAPE_AREA) AS NUMERIC), 6) PRCNT
        FROM HEXGRID_150 HG
            JOIN MUNICIPAL_PLAN MP
                ON ST_INTERSECTS(HG.GEOM, MP.GEOM)
        GROUP BY HG.GID, HG.SHAPE_AREA) AS IQ
WHERE HEXGRID_150.GID = IQ.ID;
*/

-- Create the final layer view
CREATE VIEW FINAL_LAYER
AS
(
    SELECT HG.GID AS GID,
        HG.OBJECTID AS OBJECTID,
        HG.SHAPE_AREA AS SHAPE_AREA,
        HG.GEOM AS GEOM,
        HG.BUILDING_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS BUILDING_RATIO,
        HG.BURIAL_AREA_RATIO  * CFG.RESTRICTIVE_MULTIPLIER AS BURIAL_AREA_RATIO,
        HG.CONSERVATION_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS CONSERVATION_RATIO,
        HG.DUNE_CONSERVATION_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS DUNE_CONSERVATION_RATIO,
        HG.EDGE_WATER_STREAM_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS EDGE_WATER_STREAM_RATIO,
        HG.FOREST_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS FOREST_RATIO,
        HG.LAKE_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS LAKE_RATIO,
        HG.NATURAL_BIRD_PROTECTION_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS NATURAL_BIRD_PROTECTION_RATIO,
        HG.NATURAL_HABITAT_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS NATURAL_HABITAT_RATIO,
        HG.NATURE_AND_WILDLIFE_SANCTUARY_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS NATURE_AND_WILDLIFE_SANCTUARY_RATIO,
        HG.NATURE_REGISTRATION_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS NATURE_REGISTRATION_RATIO,
        HG.PROTECTED_ANCIENT_SITES_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS PROTECTED_ANCIENT_SITES_RATIO,
        HG.PROTECTED_NATURE_TYPES_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS PROTECTED_NATURE_TYPES_RATIO,
        HG.PROTECTED_WATER_STREAMS_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS PROTECTED_WATER_STREAMS_RATIO,
        HG.RAMSAR_AREA_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS RAMSAR_AREA_RATIO,
        HG.ROADSIDES_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS ROADSIDES_RATIO,
        HG.STATE_ROAD_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS STATE_ROAD_RATIO,
        HG.RAILROAD_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS RAILROAD_RATIO,
        HG.WIND_TURBINE_RATIO * CFG.RESTRICTIVE_MULTIPLIER AS WIND_TURBINE_RATIO,
        
        HG.CHURCH_PROTECTION_LINE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS CHURCH_PROTECTION_LINE_RATIO,
        HG.COAST_LINE_ZONE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS COAST_LINE_ZONE_RATIO,
        HG.FOREST_PROTECTION_LINE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS FOREST_PROTECTION_LINE_RATIO,
        HG.FOREST_RESERVE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS FOREST_RESERVE_RATIO,
        HG.LAKE_PROTECTION_LINE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS LAKE_PROTECTION_LINE_RATIO,
        HG.LOWLANDS_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS LOWLANDS_RATIO,
        HG.PROTECTED_EARTH_STONE_DIKES_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS PROTECTED_EARTH_STONE_DIKES_RATIO,
        HG.STREAM_PROTECTION_LINE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS STREAM_PROTECTION_LINE_RATIO,
        HG.V2_SOIL_POLUTION_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS V2_SOIL_POLUTION_RATIO,
        HG.WETLANDS_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS WETLANDS_RATIO,
        HG.BEACH_PROTECTION_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS BEACH_PROTECTION_RATIO,
        HG.WIND_TURBINE_SITE_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS WIND_TURBINE_SITE_RATIO,
        HG.MUNICIPALITY_ROAD_RATIO * CFG.UNRECEPTIVE_MULTIPLIER AS MUNICIPALITY_ROAD_RATIO,
        
        HG.DISTRICT_PLAN_RATIO * CFG.LIMITING_MULTIPLIER AS DISTRICT_PLAN_RATIO,
        HG.V1_SOIL_POLUTION_RATIO * CFG.LIMITING_MULTIPLIER AS V1_SOIL_POLUTION_RATIO,
        HG.DRINKING_WATER_INTEREST_RATIO * CFG.LIMITING_MULTIPLIER AS DRINKING_WATER_INTEREST_RATIO,

        HG.TECHNICAL_AREAS_RATIO * CFG.ADVANTAGEOUS_MULTIPLIER AS TECHNICAL_AREAS_RATIO,
        
        HG.RAW_MATERIAL_SITES_RATIO AS RAW_MATERIAL_SITES_RATIO,
        HG.MUNICIPAL_PLAN_RATIO AS MUNICIPAL_PLAN_RATIO,
        HG.SFL_AREAS_RATIO AS SFL_AREAS_RATIO
        
    FROM HEXGRID_150 HG
        JOIN V_CONFIG CFG
            ON CFG.C_ID = 1
);